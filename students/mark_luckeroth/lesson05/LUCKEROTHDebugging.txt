1.
--> The function is set to return True for the intended condition, but does not have a test condition to return False
--> If the initial value of n is not a power of 2, then with each call to my_fun(n/2) it will never = 2 and
    therefore will never meet a return condition other than to call my_fun(n/2) again
--> As the program gets deeper into recusion, the value of n asymptotically approaches zero, dividing by 2 each time.

2.

$ ~/git-repos/python220/SP_Online_Course2_2018/students/mark_luckeroth/lesson05$ python -m pdb recursive.py 15
> /home/mjlucker/git-repos/python220/SP_Online_Course2_2018/students/mark_luckeroth/lesson05/recursive.py(3)<module>()
-> import sys
(Pdb) ll
  1     #!/usr/bin/env python3
  2
  3  -> import sys
  4
  5     def my_fun(n):
  6         if n == 2:
  7             return True
  8         return my_fun(n/2)
  9
 10     if __name__ == '__main__':
 11         n = int(sys.argv[1])
 12         print(my_fun(n))
(Pdb) n
> /home/mjlucker/git-repos/python220/SP_Online_Course2_2018/students/mark_luckeroth/lesson05/recursive.py(5)<module>()
-> def my_fun(n):
(Pdb) n
> /home/mjlucker/git-repos/python220/SP_Online_Course2_2018/students/mark_luckeroth/lesson05/recursive.py(10)<module>()
-> if __name__ == '__main__':
(Pdb) n
> /home/mjlucker/git-repos/python220/SP_Online_Course2_2018/students/mark_luckeroth/lesson05/recursive.py(11)<module>()
-> n = int(sys.argv[1])
(Pdb) s
> /home/mjlucker/git-repos/python220/SP_Online_Course2_2018/students/mark_luckeroth/lesson05/recursive.py(12)<module>()
-> print(my_fun(n))
(Pdb) pp n
15
(Pdb) s
--Call--
> /home/mjlucker/git-repos/python220/SP_Online_Course2_2018/students/mark_luckeroth/lesson05/recursive.py(5)my_fun()
-> def my_fun(n):
(Pdb) s
> /home/mjlucker/git-repos/python220/SP_Online_Course2_2018/students/mark_luckeroth/lesson05/recursive.py(6)my_fun()
-> if n == 2:
(Pdb) s
> /home/mjlucker/git-repos/python220/SP_Online_Course2_2018/students/mark_luckeroth/lesson05/recursive.py(8)my_fun()
-> return my_fun(n/2)
(Pdb) s
--Call--
> /home/mjlucker/git-repos/python220/SP_Online_Course2_2018/students/mark_luckeroth/lesson05/recursive.py(5)my_fun()
-> def my_fun(n):
(Pdb) pp n
7.5
(Pdb) s
> /home/mjlucker/git-repos/python220/SP_Online_Course2_2018/students/mark_luckeroth/lesson05/recursive.py(6)my_fun()
-> if n == 2:
(Pdb) s
> /home/mjlucker/git-repos/python220/SP_Online_Course2_2018/students/mark_luckeroth/lesson05/recursive.py(8)my_fun()
-> return my_fun(n/2)
(Pdb) s
--Call--
> /home/mjlucker/git-repos/python220/SP_Online_Course2_2018/students/mark_luckeroth/lesson05/recursive.py(5)my_fun()
-> def my_fun(n):
(Pdb) s
> /home/mjlucker/git-repos/python220/SP_Online_Course2_2018/students/mark_luckeroth/lesson05/recursive.py(6)my_fun()
-> if n == 2:
(Pdb) s
> /home/mjlucker/git-repos/python220/SP_Online_Course2_2018/students/mark_luckeroth/lesson05/recursive.py(8)my_fun()
-> return my_fun(n/2)
(Pdb) s
--Call--
> /home/mjlucker/git-repos/python220/SP_Online_Course2_2018/students/mark_luckeroth/lesson05/recursive.py(5)my_fun()
-> def my_fun(n):
(Pdb) s
> /home/mjlucker/git-repos/python220/SP_Online_Course2_2018/students/mark_luckeroth/lesson05/recursive.py(6)my_fun()
-> if n == 2:
(Pdb) s
> /home/mjlucker/git-repos/python220/SP_Online_Course2_2018/students/mark_luckeroth/lesson05/recursive.py(8)my_fun()
-> return my_fun(n/2)
(Pdb) pp n
1.875
