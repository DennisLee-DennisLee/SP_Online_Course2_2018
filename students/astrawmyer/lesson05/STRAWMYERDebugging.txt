This function has only one condition to stop. When N is exactly 2. When the initial input isn’t a value that will eventually reach 2, the recursion will jump over 2 on its way to an infinitesimally small number. N is a limit approaching zero (as in calculus.)

--------

PS C:\Programming\SP_Online_Course2_2018\students\astrawmyer\lesson05\ungraded> python recursive.py 8
True
PS C:\Programming\SP_Online_Course2_2018\students\astrawmyer\lesson05\ungraded> python recursive.py 16
True
PS C:\Programming\SP_Online_Course2_2018\students\astrawmyer\lesson05\ungraded> python recursive.py 3
Traceback (most recent call last):
  File "recursive.py", line 13, in <module>
    print(my_fun(n))
  File "recursive.py", line 8, in my_fun
    return my_fun(n/2)
  File "recursive.py", line 8, in my_fun
    return my_fun(n/2)
  File "recursive.py", line 8, in my_fun
    return my_fun(n/2)
  [Previous line repeated 994 more times]
  File "recursive.py", line 5, in my_fun
    if n == 2:
RecursionError: maximum recursion depth exceeded in comparison
PS C:\Programming\SP_Online_Course2_2018\students\astrawmyer\lesson05\ungraded> python -m pdb recursive.py 5
> c:\programming\sp_online_course2_2018\students\astrawmyer\lesson05\ungraded\recursive.py(1)<module>()
-> import sys
(Pdb) n
> c:\programming\sp_online_course2_2018\students\astrawmyer\lesson05\ungraded\recursive.py(4)<module>()
-> def my_fun(n):
(Pdb) n
> c:\programming\sp_online_course2_2018\students\astrawmyer\lesson05\ungraded\recursive.py(11)<module>()
-> if __name__ == '__main__':
(Pdb) n
> c:\programming\sp_online_course2_2018\students\astrawmyer\lesson05\ungraded\recursive.py(12)<module>()
-> n = int(sys.argv[1])
(Pdb) n
> c:\programming\sp_online_course2_2018\students\astrawmyer\lesson05\ungraded\recursive.py(13)<module>()
-> print(my_fun(n))
(Pdb) s
--Call--
> c:\programming\sp_online_course2_2018\students\astrawmyer\lesson05\ungraded\recursive.py(4)my_fun()
-> def my_fun(n):
(Pdb) s
> c:\programming\sp_online_course2_2018\students\astrawmyer\lesson05\ungraded\recursive.py(5)my_fun()
-> if n == 2:
(Pdb) pp n
5
(Pdb) n
> c:\programming\sp_online_course2_2018\students\astrawmyer\lesson05\ungraded\recursive.py(8)my_fun()
-> return my_fun(n/2)
(Pdb) s
--Call--
> c:\programming\sp_online_course2_2018\students\astrawmyer\lesson05\ungraded\recursive.py(4)my_fun()
-> def my_fun(n):
(Pdb) pp n
2.5
(Pdb) s
> c:\programming\sp_online_course2_2018\students\astrawmyer\lesson05\ungraded\recursive.py(5)my_fun()
-> if n == 2:
(Pdb) n
> c:\programming\sp_online_course2_2018\students\astrawmyer\lesson05\ungraded\recursive.py(8)my_fun()
-> return my_fun(n/2)
(Pdb) s
--Call--
> c:\programming\sp_online_course2_2018\students\astrawmyer\lesson05\ungraded\recursive.py(4)my_fun()
-> def my_fun(n):
(Pdb) pp n
1.25
(Pdb) s
> c:\programming\sp_online_course2_2018\students\astrawmyer\lesson05\ungraded\recursive.py(5)my_fun()
-> if n == 2:
(Pdb) n
> c:\programming\sp_online_course2_2018\students\astrawmyer\lesson05\ungraded\recursive.py(8)my_fun()
-> return my_fun(n/2)
(Pdb) s
--Call--
> c:\programming\sp_online_course2_2018\students\astrawmyer\lesson05\ungraded\recursive.py(4)my_fun()
-> def my_fun(n):
(Pdb) s
> c:\programming\sp_online_course2_2018\students\astrawmyer\lesson05\ungraded\recursive.py(5)my_fun()
-> if n == 2:
(Pdb) pp n
0.625
(Pdb) exit
PS C:\Programming\SP_Online_Course2_2018\students\astrawmyer\lesson05\ungraded>