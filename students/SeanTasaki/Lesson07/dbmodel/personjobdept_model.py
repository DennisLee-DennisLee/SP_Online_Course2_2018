'''
Sean Tasaki
11/22/2018
Lesson07
personjobdept_model
'''

"""
    Simple database examle with Peewee ORM, sqlite and Python
    Here we define the schema
"""

from peewee import *
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

database = SqliteDatabase('pj.db')
database.connect()
database.execute_sql('PRAGMA foreign_keys = ON;') # needed for sqlite only


class BaseModel(Model):
    class Meta:
        database = database


class Person(BaseModel):
    """
        This class defines Person, which maintains details of someone
        for whom we want to research career to date.
    """

    logger.info("Table Person created")
    logger.info("person_name primary key field added to Person")
    person_name = CharField(primary_key = True, max_length = 30)
    logger.info("lives_in_town field added to Person")
    lives_in_town = CharField(max_length = 40)
    logger.info("nickname field added to Person")
    nickname = CharField(max_length = 20, null = True)

class Department(BaseModel):
    
    #first character of department number must be a letter.
    #last three characters must be numbers.
    
    logger.info("Table Department created")
    logger.info("dept_num primary key field added to Department")
    dept_num = CharField(primary_key=True,
                        max_length=4,
                        constraints=[
                        Check('substr(dept_num, 1) >= "A"'),
                        Check('substr(dept_num, 1) <= "Z"'),
                        Check('substr(dept_num, 2, 1) >= "0"'),
                        Check('substr(dept_num, 2, 1) <= "9"'),
                        Check('substr(dept_num, 3, 1) >= "0"'),
                        Check('substr(dept_num, 3, 1) <= "9"'),
                        Check('substr(dept_num, 4, 1) >= "0"'),
                        Check('substr(dept_num, 4, 1) <= "9"')])
    
    logger.info("dept_name field added to Department")
    dept_name = CharField(max_length=30)
    logger.info("dept_manager field added to Department")
    dept_manager = CharField(max_length=30)
    

class Job(BaseModel):
    """
        This class defines Job, which maintains details of past Jobs
        held by a Person.
    """
    logger.info("Table Job created")
    logger.info("job_name primary key field added to Job")
    job_name = CharField(primary_key = True, max_length = 30)
    logger.info("start_date field added to Job")
    start_date = DateField(formats = 'YYYY-MM-DD')
    logger.info("end_date field added to Job")
    end_date = DateField(formats = 'YYYY-MM-DD')
    logger.info("salary field added to Job")
    salary = DecimalField(max_digits = 7, decimal_places = 2)
    logger.info("person_employed field added to Job; the field is "
                "a foreign key from the Person table.")
    person_employed = ForeignKeyField(Person, related_name='was_filled_by', null = False)
    job_department = ForeignKeyField(Department, related_name='in_department', null = False)
    
class PersonNumKey(BaseModel):
    """
        This class defines Person, which maintains details of someone
        for whom we want to research career to date.
        *** I am implemented with a numeric PK that is generated by the system ***
    """
    person_name = CharField(max_length = 30)
    lives_in_town = CharField(max_length = 40)
    nickname = CharField(max_length = 20, null = True)

database.create_tables([
        Person,
        Department,
        Job,
        PersonNumKey
    ])

database.close()