"""
    Simple database examle with Peewee ORM, sqlite and Python
    Here we define the schema

"""

from peewee import *
import logging


# define default formatter
format = "%(asctime)s %(filename)s:%(lineno)-3d %(levelname)s %(message)s"
formatter = logging.Formatter(format)

# define handler for console
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(formatter)

# create logger and add handlers
logger = logging.getLogger()
logger.setLevel(logging.INFO)
logger.addHandler(console_handler)

# database connection
database = SqliteDatabase('work.db')
database.connect()
database.execute_sql('PRAGMA foreign_keys = ON;')


class BaseModel(Model):
    class Meta:
        database = database


class Person(BaseModel):
    """
        This class defines Person, which maintains details of someone
        for whom we want to research career to date.
    """
    logger.info("Creating Person Table")
    logger.info("-" *30)

    logger.info('Adding - person name')
    person_name = CharField(primary_key = True, max_length = 30)

    logger.info('Adding - lives in town')
    lives_in_town = CharField(max_length = 40)

    logger.info('Adding - nickname')
    nickname = CharField(max_length = 20, null = True)


class Department(BaseModel):
    """
        This class defines Department, which maintains details of the department
        in which a person held a job.
    """
    logger.info("Creating Department Table")
    logger.info("-" *30)

    logger.info('Adding - department name')
    dept_name = CharField(primary_key=True, max_length=30)

    logger.info('Adding - department manager')
    dept_manager = CharField(max_length=30)

    logger.info('Adding - department number')
    fmt_check = 'upper( substr( dept_number, 1, 1 ) BETWEEN "A" AND "Z" )'
    dept_number = CharField(max_length=4, unique=True,
                            constraints=[Check(fmt_check)])


class Job(BaseModel):
    """
        This class defines Job, which maintains details of past Jobs
        held by a Person.
    """
    logger.info("Creating Job Table")
    logger.info("-" *30)

    logger.info('Adding - job name')
    job_name = CharField(primary_key = True, max_length = 30)

    logger.info('Adding - start date')
    start_date = DateField(formats = 'YYYY-MM-DD')

    logger.info('Adding - end date')
    end_date = DateField(formats = 'YYYY-MM-DD')

    logger.info('Adding - salary')
    salary = DecimalField(max_digits = 7, decimal_places = 2)

    logger.info('Adding - person employed')
    person_employed = ForeignKeyField(Person, related_name='was_filled_by', null = False)

    logger.info('Adding - department name')
    dept_name = ForeignKeyField(Department)


class PersonNumKey(BaseModel):
    """
        This class defines Person, which maintains details of someone
        for whom we want to research career to date.

        *** I am implemented with a numeric PK that is generated by the system ***
    """
    logger.info("Creating Person key")
    logger.info("-" *30)

    logger.info('Adding - person name')
    person_name = CharField(max_length = 30)

    logger.info('Adding - lives in town')
    lives_in_town = CharField(max_length = 40)

    logger.info('Adding - nickname')
    nickname = CharField(max_length = 20, null = True)
